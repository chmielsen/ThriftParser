
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Aug 04 20:56:42 CEST 2013
//----------------------------------------------------

package thriftParser;


/** CUP v0.10k generated parser.
  * @version Sun Aug 04 20:56:42 CEST 2013
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\036\000\002\002\004\000\002\003\003\000\002\004" +
    "\002\000\002\004\004\000\002\005\007\000\002\005\007" +
    "\000\002\006\002\000\002\006\005\000\002\007\002\000" +
    "\002\007\005\000\002\010\010\000\002\011\003\000\002" +
    "\011\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\011\010\000\002\011\006\000\002\011\006" +
    "\000\002\012\002\000\002\012\003\000\002\012\003\000" +
    "\002\013\002\000\002\013\004\000\002\013\004\000\002" +
    "\013\006\000\002\014\003\000\002\014\003\000\002\014" +
    "\002\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\010\002\uffff\016\uffff\030\uffff\001\002\000" +
    "\010\002\000\016\007\030\011\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\004\032\061\001" +
    "\002\000\010\002\ufffe\016\ufffe\030\ufffe\001\002\000\004" +
    "\032\012\001\002\000\004\004\013\001\002\000\006\005" +
    "\ufffb\031\ufffb\001\002\000\006\005\016\031\017\001\002" +
    "\000\004\006\060\001\002\000\010\002\ufffd\016\ufffd\030" +
    "\ufffd\001\002\000\004\010\020\001\002\000\026\017\uffee" +
    "\020\uffee\021\uffee\022\uffee\023\uffee\024\023\025\022\026" +
    "\uffee\027\uffee\032\uffee\001\002\000\022\017\034\020\033" +
    "\021\032\022\030\023\027\026\026\027\025\032\031\001" +
    "\002\000\022\017\uffed\020\uffed\021\uffed\022\uffed\023\uffed" +
    "\026\uffed\027\uffed\032\uffed\001\002\000\022\017\uffec\020" +
    "\uffec\021\uffec\022\uffec\023\uffec\026\uffec\027\uffec\032\uffec" +
    "\001\002\000\004\032\050\001\002\000\010\007\ufff6\012" +
    "\ufff6\032\ufff6\001\002\000\004\011\045\001\002\000\004" +
    "\011\040\001\002\000\004\011\035\001\002\000\010\007" +
    "\ufff2\012\ufff2\032\ufff2\001\002\000\010\007\ufff3\012\ufff3" +
    "\032\ufff3\001\002\000\010\007\ufff5\012\ufff5\032\ufff5\001" +
    "\002\000\010\007\ufff4\012\ufff4\032\ufff4\001\002\000\022" +
    "\017\034\020\033\021\032\022\030\023\027\026\026\027" +
    "\025\032\031\001\002\000\004\012\037\001\002\000\010" +
    "\007\ufff0\012\ufff0\032\ufff0\001\002\000\022\017\034\020" +
    "\033\021\032\022\030\023\027\026\026\027\025\032\031" +
    "\001\002\000\004\007\042\001\002\000\022\017\034\020" +
    "\033\021\032\022\030\023\027\026\026\027\025\032\031" +
    "\001\002\000\004\012\044\001\002\000\010\007\ufff1\012" +
    "\ufff1\032\ufff1\001\002\000\022\017\034\020\033\021\032" +
    "\022\030\023\027\026\026\027\025\032\031\001\002\000" +
    "\004\012\047\001\002\000\010\007\uffef\012\uffef\032\uffef" +
    "\001\002\000\006\006\uffeb\013\052\001\002\000\004\006" +
    "\ufff7\001\002\000\010\014\055\015\054\031\053\001\002" +
    "\000\004\006\uffea\001\002\000\004\032\056\001\002\000" +
    "\004\006\uffe9\001\002\000\004\015\057\001\002\000\004" +
    "\006\uffe8\001\002\000\006\005\ufffa\031\ufffa\001\002\000" +
    "\004\004\062\001\002\000\006\005\ufff9\032\ufff9\001\002" +
    "\000\006\005\065\032\066\001\002\000\004\007\071\001" +
    "\002\000\010\002\ufffc\016\ufffc\030\ufffc\001\002\000\004" +
    "\013\067\001\002\000\004\031\070\001\002\000\004\007" +
    "\uffe4\001\002\000\006\005\ufff8\032\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\067\000\006\003\004\004\003\001\001\000\004\005" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\013\001\001\000\004\010\014\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\020\001\001\000\004\011\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\040\001\001\000\002\001" +
    "\001\000\004\011\042\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\045\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\062\001\001\000" +
    "\004\015\063\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public thriftParser.Absyn.Prog pProg() throws Exception
  {
	java_cup.runtime.Symbol res = parse();
	return (thriftParser.Absyn.Prog) res.value;
  }

public <B,A extends java.util.LinkedList<? super B>> A cons_(B x, A xs) { xs.addFirst(x); return xs; }

public void syntax_error(java_cup.runtime.Symbol cur_token)
{
	report_error("Syntax Error, trying to recover and continue parse...", cur_token);
}

public void unrecovered_syntax_error(java_cup.runtime.Symbol cur_token) throws java.lang.Exception
{
	throw new Exception("Unrecoverable Syntax Error");
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Enumeration ::= _IDENT_ _SYMB_7 _INTEGER_ 
            {
              thriftParser.Absyn.Enumeration RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		Integer p_3 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new thriftParser.Absyn.OneEnum(p_1,p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Enumeration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Delim ::= 
            {
              thriftParser.Absyn.Delim RESULT = null;
		 RESULT = new thriftParser.Absyn.Empty(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Delim*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Delim ::= _SYMB_2 
            {
              thriftParser.Absyn.Delim RESULT = null;
		 RESULT = new thriftParser.Absyn.SemiC(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Delim*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Delim ::= _SYMB_3 
            {
              thriftParser.Absyn.Delim RESULT = null;
		 RESULT = new thriftParser.Absyn.Comma(); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Delim*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Default ::= _SYMB_7 _SYMB_9 _IDENT_ _SYMB_9 
            {
              thriftParser.Absyn.Default RESULT = null;
		String p_3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new thriftParser.Absyn.DefStr(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Default*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Default ::= _SYMB_7 _SYMB_8 
            {
              thriftParser.Absyn.Default RESULT = null;
		 RESULT = new thriftParser.Absyn.DefEmptyStr(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Default*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Default ::= _SYMB_7 _INTEGER_ 
            {
              thriftParser.Absyn.Default RESULT = null;
		Integer p_2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new thriftParser.Absyn.DefInt(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Default*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Default ::= 
            {
              thriftParser.Absyn.Default RESULT = null;
		 RESULT = new thriftParser.Absyn.DefEmp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Default*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Requirement ::= _SYMB_16 
            {
              thriftParser.Absyn.Requirement RESULT = null;
		 RESULT = new thriftParser.Absyn.ROpt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Requirement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Requirement ::= _SYMB_17 
            {
              thriftParser.Absyn.Requirement RESULT = null;
		 RESULT = new thriftParser.Absyn.RReq(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Requirement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Requirement ::= 
            {
              thriftParser.Absyn.Requirement RESULT = null;
		 RESULT = new thriftParser.Absyn.REmp(); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Requirement*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Type ::= _SYMB_18 _SYMB_5 Type _SYMB_6 
            {
              thriftParser.Absyn.Type RESULT = null;
		thriftParser.Absyn.Type p_3 = (thriftParser.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new thriftParser.Absyn.TSet(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Type ::= _SYMB_14 _SYMB_5 Type _SYMB_6 
            {
              thriftParser.Absyn.Type RESULT = null;
		thriftParser.Absyn.Type p_3 = (thriftParser.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new thriftParser.Absyn.TList(p_3); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Type ::= _SYMB_15 _SYMB_5 Type _SYMB_3 Type _SYMB_6 
            {
              thriftParser.Absyn.Type RESULT = null;
		thriftParser.Absyn.Type p_3 = (thriftParser.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		thriftParser.Absyn.Type p_5 = (thriftParser.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new thriftParser.Absyn.TMap(p_3,p_5); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= _IDENT_ 
            {
              thriftParser.Absyn.Type RESULT = null;
		String p_1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new thriftParser.Absyn.TIdent(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= _SYMB_13 
            {
              thriftParser.Absyn.Type RESULT = null;
		 RESULT = new thriftParser.Absyn.TLong(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= _SYMB_11 
            {
              thriftParser.Absyn.Type RESULT = null;
		 RESULT = new thriftParser.Absyn.TShort(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= _SYMB_12 
            {
              thriftParser.Absyn.Type RESULT = null;
		 RESULT = new thriftParser.Absyn.TInt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= _SYMB_19 
            {
              thriftParser.Absyn.Type RESULT = null;
		 RESULT = new thriftParser.Absyn.TStr(); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Type*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Field ::= _INTEGER_ _SYMB_4 Requirement Type _IDENT_ Default 
            {
              thriftParser.Absyn.Field RESULT = null;
		Integer p_1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		thriftParser.Absyn.Requirement p_3 = (thriftParser.Absyn.Requirement)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		thriftParser.Absyn.Type p_4 = (thriftParser.Absyn.Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		String p_5 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		thriftParser.Absyn.Default p_6 = (thriftParser.Absyn.Default)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new thriftParser.Absyn.FDecl(p_1,p_3,p_4,p_5,p_6); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*Field*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ListEnumeration ::= ListEnumeration Enumeration _SYMB_3 
            {
              thriftParser.Absyn.ListEnumeration RESULT = null;
		thriftParser.Absyn.ListEnumeration p_1 = (thriftParser.Absyn.ListEnumeration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		thriftParser.Absyn.Enumeration p_2 = (thriftParser.Absyn.Enumeration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListEnumeration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ListEnumeration ::= 
            {
              thriftParser.Absyn.ListEnumeration RESULT = null;
		 RESULT = new thriftParser.Absyn.ListEnumeration(); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*ListEnumeration*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ListField ::= ListField Field _SYMB_2 
            {
              thriftParser.Absyn.ListField RESULT = null;
		thriftParser.Absyn.ListField p_1 = (thriftParser.Absyn.ListField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		thriftParser.Absyn.Field p_2 = (thriftParser.Absyn.Field)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListField*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ListField ::= 
            {
              thriftParser.Absyn.ListField RESULT = null;
		 RESULT = new thriftParser.Absyn.ListField(); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*ListField*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Class ::= _SYMB_10 _IDENT_ _SYMB_0 ListEnumeration _SYMB_1 
            {
              thriftParser.Absyn.Class RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		thriftParser.Absyn.ListEnumeration p_4 = (thriftParser.Absyn.ListEnumeration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new thriftParser.Absyn.Enum(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Class*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Class ::= _SYMB_20 _IDENT_ _SYMB_0 ListField _SYMB_1 
            {
              thriftParser.Absyn.Class RESULT = null;
		String p_2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		thriftParser.Absyn.ListField p_4 = (thriftParser.Absyn.ListField)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new thriftParser.Absyn.Struct(p_2,p_4); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Class*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ListClass ::= ListClass Class 
            {
              thriftParser.Absyn.ListClass RESULT = null;
		thriftParser.Absyn.ListClass p_1 = (thriftParser.Absyn.ListClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		thriftParser.Absyn.Class p_2 = (thriftParser.Absyn.Class)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = p_1; p_1.addLast(p_2); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListClass*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ListClass ::= 
            {
              thriftParser.Absyn.ListClass RESULT = null;
		 RESULT = new thriftParser.Absyn.ListClass(); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*ListClass*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= ListClass 
            {
              thriftParser.Absyn.Prog RESULT = null;
		thriftParser.Absyn.ListClass p_1 = (thriftParser.Absyn.ListClass)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new thriftParser.Absyn.Program(p_1); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Prog*/, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT = null;
		thriftParser.Absyn.Prog start_val = (thriftParser.Absyn.Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

